services:
  # Traefik сервис
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped

  # user service
  tarantool:
    image: tarantool/tarantool:3
    volumes:
      - ./tarantool_database/init:/opt/tarantool
      - ./tarantool_database/utils:/opt/tarantool/utils
    environment:
      - LUA_PATH=/opt/tarantool/?.lua;/opt/tarantool/?/init.lua
    ports:
      - "3301:3301"
    command: tarantool /opt/tarantool/init.lua
    logging:
      driver: "json-file"
      options:
        max-size: "200k"
        max-file: "10"

  user-service:
    build:
      context: ./user_service
      dockerfile: Dockerfile
    environment:
      - DB_HOST=tarantool:3301
      - APP_ENV=prod
    depends_on:
      - tarantool
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.user-service.rule=PathPrefix(`/user_service`)"
      - "traefik.http.services.user-service.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.strip-user-service.stripprefix.prefixes=/user_service"
      - "traefik.http.routers.user-service.middlewares=strip-user-service"

  # AI service
  ai-service:
    build:
      context: ./ai_service
      dockerfile: Dockerfile
    container_name: ai_service_app
    env_file:
      - ai_service/.env
    environment:
      - AUTH_SERVICE_URL=http://user-service:8080/api/v001/auth/check
    restart: unless-stopped
    depends_on:
      - user-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ai-service.rule=PathPrefix(`/ai_service`)"
      - "traefik.http.services.ai-service.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.strip-ai-service.stripprefix.prefixes=/ai_service"
      - "traefik.http.routers.ai-service.middlewares=strip-ai-service"

  # Resume storage
  minio-resume-service:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: resume
      MINIO_ROOT_PASSWORD: generator
    volumes:
      - minio-storage:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3

  postgres-resume-service:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: resume
      POSTGRES_PASSWORD: generator
      POSTGRES_DB: resume_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./resume_storage/migrate:/docker-entrypoint-initdb.d

  resume-storage:
    build:
      context: .
      dockerfile: ./resume_storage/Dockerfile
    environment:
      - APP_ENV=prod
    depends_on:
      - postgres-resume-service
      - minio-resume-service
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.resume-storage.rule=PathPrefix(`/resume_storage`)"
      - "traefik.http.services.resume-storage.loadbalancer.server.port=8080"
      - "traefik.http.middlewares.strip-resume-service.stripprefix.prefixes=/resume_storage"
      - "traefik.http.routers.resume-storage.middlewares=strip-resume-service"

volumes:
  minio-storage:
  postgres-data: