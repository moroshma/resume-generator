# Removed version: '3' as it's less relevant now

services:
  user_service:
    build: .
    container_name: user_service_app # Added for clarity
    env_file:
      - .env # Keep this if your Go app CAN read env vars
    # If your Go app ONLY reads config.yaml, comment out env_file and uncomment volumes below
    # volumes:
    #  - ./config:/app/config # Mount local config dir to /app/config in container
    ports:
      - "8099:8099" # CORRECT PORT MAPPING! Host 8099 -> Container 8099
    environment:
      # Explicitly define DB host for clarity, matching the service name below
      DB_HOST: users_db
      # Add any other env vars your app needs, potentially overriding .env
      # Example: If your config reads LISTENING_PORT env var:
      # LISTENING_PORT: 8099
    depends_on:
      users_db:
        condition: service_healthy # Wait for DB to be healthy (requires healthcheck)
    restart: unless-stopped

  users_db:
    image: postgres:alpine
    container_name: user_service_db # Added for clarity
    environment:
      # These MUST match the credentials your user_service expects
      POSTGRES_USER: ${DB_USER:-postgres}   # Use value from .env or default to 'postgres'
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password123} # Use value from .env or default to 'password123'
      POSTGRES_DB: ${DB_NAME:-users_db}      # Use value from .env or default to 'users_db'
    volumes:
      - postgres-db:/var/lib/postgresql/data
      # Verify this path is correct relative to this docker-compose.yml
      - ./internal/migrations:/docker-entrypoint-initdb.d
    ports:
      # - "5432:5432" # Commented out: Usually not needed and prevents conflicts
      - "5433:5432" # Optional: Map to different host port ONLY for external debugging
    healthcheck: # Added healthcheck for depends_on
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-users_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: unless-stopped

volumes:
  postgres-db:
