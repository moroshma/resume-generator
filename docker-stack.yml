version: "3.8" # Рекомендуется указывать версию

x-logger: &logger
  logging:
    driver: json-file
    options:
      max-size: "10M"
      max-file: "3"
      tag: "{{.ImageName}}|{{.Name}}"

services:
  # Traefik Front - Edge Router (TLS Termination)
  traefik-front:
    image: traefik:v2.10
    command:
      # --- Static Configuration ---
      - "--api.dashboard=true"
      - "--log.level=INFO"
      # --- Entrypoints ---
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # --- Redirect HTTP to HTTPS ---
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      # --- Docker Provider (только для обнаружения внутреннего traefik и себя) ---
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=resumeapp_proxy"
      # --- File Provider (для TLS сертификатов и возможной доп. конфигурации) ---
      - "--providers.file.directory=/etc/traefik/dynamic_conf"
      - "--providers.file.watch=true"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # Порт 8080 (API/Dashboard) не публикуем, доступ через роутер ниже
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Динамическая конфигурация (tls.yml и др.)
      - /opt/traefik/dynamic_conf:/etc/traefik/dynamic_conf:ro
      # --- Монтируем реальные сертификаты с хоста ---
      - /opt/certs/cvibe.ru.crt:/certs/cvibe.ru.crt:ro # Путь к вашему .crt на хосте
      - /opt/certs/cvibe.ru.key:/certs/cvibe.ru.key:ro # Путь к вашему .key на хосте
      - /opt/certs/cvibe.ru.ca:/certs/cvibe.ru.ca:ro # Если есть CA сертификат
    networks:
      - proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [ node.role == manager ]
      labels:
        # --- Маршрутизация Dashboard самого traefik-front ---
        - "traefik.enable=true" # Обнаружение самого себя
        - "traefik.http.routers.traefik-front-dashboard.rule=Host(`traefik.cvibe.ru`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
        - "traefik.http.routers.traefik-front-dashboard.service=api@internal"
        - "traefik.http.routers.traefik-front-dashboard.entrypoints=websecure"
        - "traefik.http.routers.traefik-front-dashboard.tls=true"
        # - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$...$$..." # Замените на ваш хеш htpasswd
        # - "traefik.http.routers.traefik-front-dashboard.middlewares=auth"
    <<: *logger

  # Traefik Internal - Service Router (No TLS)
  traefik:
    image: traefik:v2.10
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true"
      - "--log.level=INFO"
      - "--entrypoints.web.address=:80"
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=resumeapp_proxy"
    # --- НЕ публикуем порты наружу ---
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    labels:
      # --- Лейбл для traefik-front, чтобы он обнаружил этот сервис ---
      # --- УДАЛИТЕ ЭТИ РОУТЕРЫ ОТСЮДА ---
      # - "traefik.http.routers.to-internal-traefik.rule=Host(`cvibe.ru`) || Host(`www.cvibe.ru`)"
      # - "traefik.http.routers.to-internal-traefik.entrypoints=websecure"
      # - "traefik.http.routers.to-internal-traefik.tls=true"
      # - "traefik.http.routers.to-internal-traefik.service=internal-traefik-service"
      # - "traefik.http.routers.to-internal-traefik.priority=1"
      # - "traefik.http.routers.traefik-internal-dashboard.rule=Host(`traefik-internal.cvibe.ru`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      # - "traefik.http.routers.traefik-internal-dashboard.service=internal-traefik-dashboard-service"
      # - "traefik.http.routers.traefik-internal-dashboard.entrypoints=websecure"
      # - "traefik.http.routers.traefik-internal-dashboard.tls=true"

      # --- ОСТАВЬТЕ ЭТИ СЕРВИСЫ ЗДЕСЬ ---
      # Сервис в traefik-front, указывающий на порт 80 этого внутреннего traefik
      - "traefik.enable=true" # Этот лейбл читает traefik-front
      - "traefik.http.services.internal-traefik-service.loadbalancer.server.port=80"
      # Сервис в traefik-front, указывающий на порт 8080 (dashboard) этого внутреннего traefik
      - "traefik.http.services.internal-traefik-dashboard-service.loadbalancer.server.port=8080"
  <<: *logger

  # Portainer - Docker Management UI
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    ports:
      - target: 9443
        published: 9443
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - proxy # Нужен в сети proxy для доступа через внутренний traefik
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
      labels:
        # --- Лейблы для ВНУТРЕННЕГО traefik ---
        - "traefik.enable=true" # Этот лейбл читает внутренний traefik
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.portainer.rule=Host(`portainer.cvibe.ru`)" # Ваш домен для Portainer
        - "traefik.http.routers.portainer.entrypoints=web"
        - "traefik.http.routers.portainer.service=portainer-service"
        # --- Portainer работает по HTTPS (порт 9443), поэтому внутренний traefik должен обращаться к нему по HTTPS ---
        - "traefik.http.services.portainer-service.loadbalancer.server.port=9443"
        - "traefik.http.services.portainer-service.loadbalancer.server.scheme=https"
        # Замечание: traefik-front перенаправляет запрос на внутренний traefik по HTTP,
        # а внутренний traefik уже общается с Portainer по HTTPS.
    <<: *logger

  # Front-end App
  front:
    image: qwikman/resume-front:main
    environment:
      - NODE_ENV=production
      - PORT=80
      - BASE_HOST=http://traefik:80 # Можно убрать, если не используется приложением напрямую
    networks:
      - proxy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        # --- Лейблы для ВНУТРЕННЕГО traefik ---
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.front.entrypoints=web" # <--- Entrypoint внутреннего traefik
        - "traefik.http.routers.front.rule=PathPrefix(`/`)" # Ловит все остальное
        - "traefik.http.services.front.loadbalancer.server.port=80" # Порт приложения внутри контейнера
        - "traefik.http.routers.front.priority=5" # Приоритет ниже, чем у сервисов с PathPrefix

    <<: *logger

  # Tarantool - база данных для user-service
  tarantool:
    image: tarantool/tarantool:3
    volumes:
      - /opt/resume-app/configs/tarantool/init.lua:/opt/tarantool/init.lua:ro
      - /opt/resume-app/configs/tarantool/utils/utils.lua:/opt/tarantool/utils/utils.lua:ro
      - tarantool-data:/var/lib/tarantool
    environment:
      - LUA_PATH=/opt/tarantool/?.lua;/opt/tarantool/?/init.lua;/opt/tarantool/utils/?.lua;;
    command: tarantool /opt/tarantool/init.lua
    networks:
      - internal # Только внутренняя сеть
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    <<: *logger

  # User Service
  user-service:
    image: qwikman/user-service:main
    environment:
      - DB_HOST=tarantool:3301
      - APP_ENV=prod
    networks:
      - proxy # Для доступа от внутреннего traefik
      - internal # Для доступа к Tarantool
    depends_on:
      - tarantool
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        # --- Лейблы для ВНУТРЕННЕГО traefik ---
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.user-service.entrypoints=web" # <--- Entrypoint внутреннего traefik
        - "traefik.http.routers.user-service.rule=PathPrefix(`/user_service`)"
        - "traefik.http.middlewares.strip-user-service.stripprefix.prefixes=/user_service"
        - "traefik.http.routers.user-service.middlewares=strip-user-service@docker" # Указываем провайдер @docker
        - "traefik.http.services.user-service.loadbalancer.server.port=8080" # Порт FastAPI внутри контейнера
    <<: *logger

  # AI Service
  ai-service:
    image: qwikman/ai-service:main
    environment:
      - AUTH_SERVICE_URL=http://user-service:8080/api/v001/auth/check
    networks:
      - proxy
      - internal # Возможно нужен для связи с user-service (если он не только через proxy)
    depends_on:
      - user-service
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.ai-service.entrypoints=web"
        - "traefik.http.routers.ai-service.rule=PathPrefix(`/ai_service`)"
        - "traefik.http.middlewares.strip-ai-service.stripprefix.prefixes=/ai_service"
        - "traefik.http.routers.ai-service.middlewares=strip-ai-service@docker" # Указываем провайдер @docker
        - "traefik.http.services.ai-service.loadbalancer.server.port=8080" # Порт FastAPI внутри контейнера
    <<: *logger

  # Minio Resume Service
  minio-resume-service:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_user
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_password
    secrets:
      - minio_user
      - minio_password
    volumes:
      - minio-storage:/data
    networks:
      - internal # Только внутренняя сеть
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    <<: *logger

  # Postgres Resume Service
  postgres-resume-service:
    image: postgres:latest
    volumes:
      - /opt/resume-app/configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=resume_db
    secrets:
      - postgres_user
      - postgres_password
    networks:
      - internal # Только внутренняя сеть
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    <<: *logger

  # Resume Storage Service
  resume-storage:
    image: qwikman/resume-storage:main
    environment:
      - APP_ENV=prod
      - DB_HOST=postgres-resume-service
      - DB_PORT=5432
      - DB_USER_FILE=/run/secrets/postgres_user
      - DB_PASSWORD_FILE=/run/secrets/postgres_password
      - DB_NAME=resume_db
      - MINIO_ENDPOINT=minio-resume-service:9000
      - MINIO_ACCESS_KEY_FILE=/run/secrets/minio_user
      - MINIO_SECRET_KEY_FILE=/run/secrets/minio_password
      - MINIO_BUCKET=resumes
      - MINIO_USE_SSL=false # Внутри сети общаемся по HTTP
    secrets:
      - postgres_user
      - postgres_password
      - minio_user
      - minio_password
    networks:
      - proxy # Для доступа от внутреннего traefik
      - internal # Для доступа к Postgres и Minio
    depends_on:
      - postgres-resume-service
      - minio-resume-service
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        # --- Лейблы для ВНУТРЕННЕГО traefik ---
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.resume-storage.entrypoints=web" # <--- Entrypoint внутреннего traefik
        - "traefik.http.routers.resume-storage.rule=PathPrefix(`/resume_storage`)"
        - "traefik.http.middlewares.strip-resume-service.stripprefix.prefixes=/resume_storage"
        - "traefik.http.routers.resume-storage.middlewares=strip-resume-service@docker" # Указываем провайдер @docker
        - "traefik.http.services.resume-storage.loadbalancer.server.port=8080" # Порт FastAPI
    <<: *logger

networks:
  proxy:
    name: resumeapp_proxy # Убедитесь, что имя совпадает с командой создания и настройками traefik
    external: true # Сеть создана заранее
  internal:
    name: resumeapp_internal # Убедитесь, что имя совпадает с командой создания
    external: true # Сеть создана заранее

volumes:
  minio-storage:
  postgres-data:
  tarantool-data:
  portainer_data:

secrets:
  minio_user:
    external: true
  minio_password:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true