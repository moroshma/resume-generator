version: "3.8"

x-logger: &logger
  logging:
    driver: json-file
    options:
      max-size: "10M"
      max-file: "3"
      tag: "{{.ImageName}}|{{.Name}}"

services:
  # Traefik Front - Смотрит наружу, обрабатывает SSL для cvibe.ru
  traefik-front:
    image: traefik:v2.10
    command:
      - "--log.level=INFO"
      # Точки входа: HTTP (80) и HTTPS (443)
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # Автоматический редирект с HTTP на HTTPS
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      # Провайдер Docker (может быть полезен для dashboard или обнаружения internal)
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=resumeapp_proxy"
      # Провайдер File для загрузки динамической конфигурации (TLS, перенаправление)
      - "--providers.file.filename=/run/configs/traefik_front_dynamic_conf" # Путь к конфигу внутри контейнера
      - "--providers.file.watch=true"
    ports:
      # Открываем порты 80 и 443 на хосте
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    secrets:
      # Подключаем SSL секреты
      - source: traefik_cert
        target: traefik_cert # Имя файла внутри /run/secrets/
      - source: traefik_key
        target: traefik_key
    configs:
      # Подключаем динамическую конфигурацию
      - source: traefik_front_dynamic_conf
        target: /run/configs/traefik_front_dynamic_conf
        mode: 0444
    networks:
      - proxy # Нужен для связи с traefik
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    <<: *logger

  # Traefik Internal - Обслуживает маршрутизацию внутри сети
  traefik:
    image: traefik:v2.10
    command:
      - "--api.dashboard=true"
      - "--api.insecure=true" # Дашборд доступен внутри сети по порту 8080
      - "--log.level=INFO"
      # Провайдер Docker для обнаружения сервисов по меткам
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=resumeapp_proxy" # Сеть, где искать сервисы
      # Внутренняя точка входа (без SSL)
      - "--entrypoints.web.address=:80"
    # НЕ публикуем порты наружу для внутреннего Traefik
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy # Получает трафик от front и отправляет сервисам
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    <<: *logger

  # Portainer - Оставляем как есть, с открытым портом 9443
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    ports:
      - target: 9443
        published: 9443 # Порт остается открытым
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - proxy # Должен быть в proxy для возможного доступа через Traefik (если захочешь)
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    <<: *logger

  # --- Остальные сервисы (front, user-service, etc.) ---
  # Метки (labels) остаются прежними, т.к. их читает traefik
  # Убедись, что traefik.http.routers.*.entrypoints=web

  front:
    image: qwikman/resume-front:main
    environment:
      - NODE_ENV=production
      - PORT=80
      - BASE_HOST=http://traefik:80 # Общение через внутренний traefik
    networks:
      - proxy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.front.entrypoints=web" # <- Важно: для internal traefik
        - "traefik.http.routers.front.rule=PathPrefix(`/`)"
        - "traefik.http.services.front.loadbalancer.server.port=80"
        - "traefik.http.routers.front.priority=1"
    <<: *logger

  tarantool:
    image: tarantool/tarantool:3
    volumes:
      - /opt/resume-app/configs/tarantool/init.lua:/opt/tarantool/init.lua:ro
      - /opt/resume-app/configs/tarantool/utils/utils.lua:/opt/tarantool/utils/utils.lua:ro
      - tarantool-data:/var/lib/tarantool
    environment:
      - LUA_PATH=/opt/tarantool/?.lua;/opt/tarantool/?/init.lua;/opt/tarantool/utils/?.lua;;
    command: tarantool /opt/tarantool/init.lua
    networks:
      - internal
    <<: *logger
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  user-service:
    image: qwikman/user-service:main
    environment:
      - DB_HOST=tarantool:3301
      - APP_ENV=prod
    networks:
      - proxy
      - internal
    depends_on:
      - tarantool
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.user-service.entrypoints=web" # <- Важно: для internal traefik
        - "traefik.http.routers.user-service.rule=PathPrefix(`/user_service`)"
        - "traefik.http.middlewares.strip-user-service.stripprefix.prefixes=/user_service"
        - "traefik.http.routers.user-service.middlewares=strip-user-service"
        - "traefik.http.services.user-service.loadbalancer.server.port=8080"
    <<: *logger

  ai-service:
    image: qwikman/ai-service:main
    environment:
      - AUTH_SERVICE_URL=http://user-service:8080/api/v001/auth/check
    networks:
      - proxy
      - internal
    depends_on:
      - user-service
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.ai-service.entrypoints=web" # <- Важно: для internal traefik
        - "traefik.http.routers.ai-service.rule=PathPrefix(`/ai_service`)"
        - "traefik.http.middlewares.strip-ai-service.stripprefix.prefixes=/ai_service"
        - "traefik.http.routers.ai-service.middlewares=strip-ai-service"
        - "traefik.http.services.ai-service.loadbalancer.server.port=8080"
    <<: *logger

  minio-resume-service:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_user
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_password
    secrets:
      - minio_user
      - minio_password
    volumes:
      - minio-storage:/data
    networks:
      - internal
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    <<: *logger

  postgres-resume-service:
    image: postgres:latest
    volumes:
      - /opt/resume-app/configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=resume_db
    secrets:
      - postgres_user
      - postgres_password
    networks:
      - internal
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
    <<: *logger

  resume-storage:
    image: qwikman/resume-storage:main
    environment:
      - APP_ENV=prod
      - DB_HOST=postgres-resume-service
      - DB_PORT=5432
      - DB_USER_FILE=/run/secrets/postgres_user
      - DB_PASSWORD_FILE=/run/secrets/postgres_password
      - DB_NAME=resume_db
      - MINIO_ENDPOINT=minio-resume-service:9000
      - MINIO_ACCESS_KEY_FILE=/run/secrets/minio_user
      - MINIO_SECRET_KEY_FILE=/run/secrets/minio_password
      - MINIO_BUCKET=resumes
      - MINIO_USE_SSL=false
    secrets:
      - postgres_user
      - postgres_password
      - minio_user
      - minio_password
    networks:
      - proxy
      - internal
    depends_on:
      - postgres-resume-service
      - minio-resume-service
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        - "traefik.http.routers.resume-storage.entrypoints=web" # <- Важно: для internal traefik
        - "traefik.http.routers.resume-storage.rule=PathPrefix(`/resume_storage`)"
        - "traefik.http.middlewares.strip-resume-service.stripprefix.prefixes=/resume_storage"
        - "traefik.http.routers.resume-storage.middlewares=strip-resume-service"
        - "traefik.http.services.resume-storage.loadbalancer.server.port=8080"
    <<: *logger

# Определения сетей, вольюмов, секретов и конфигов
networks:
  proxy:
    driver: overlay
    attachable: true
    name: resumeapp_proxy # Явно задаем имя сети
  internal:
    driver: overlay
    attachable: true
    name: resumeapp_internal # Явно задаем имя сети

volumes:
  minio-storage:
  postgres-data:
  tarantool-data:
  portainer_data:

secrets:
  traefik_cert:
    external: true
  traefik_key:
    external: true
  minio_user:
    external: true
  minio_password:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true

configs:
  traefik_front_dynamic_conf:
    external: true