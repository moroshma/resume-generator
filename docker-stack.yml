version: "3.7"

services:
  # Traefik - Edge Router
  traefik:
    image: traefik:v2.10
    command:
      # --- Основные настройки ---
      - "--api.dashboard=true"
      - "--api.insecure=true" # ВНИМАНИЕ: Небезопасно для продакшена! Настройте аутентификацию.
      - "--log.level=INFO" # Уровень логирования
      # --- Провайдеры ---
      - "--providers.docker=true"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=resumeapp_proxy" # Имя вашей overlay сети
      # --- File Provider для TLS ---
      - "--providers.file.directory=/etc/traefik/dynamic_conf" # Путь ВНУТРИ контейнера
      - "--providers.file.watch=true" # Следить за изменениями в tls.yml
      # --- Точки входа (EntryPoints) ---
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443" # HTTPS точка входа
      # --- HTTP -> HTTPS Redirection ---
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443 # Открываем порт 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080 # API/Dashboard
        published: 8080 # НЕ ВЫСТАВЛЯТЬ НАРУЖУ БЕЗ ЗАЩИТЫ
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      # Монтируем каталог с tls.yml
      - /opt/traefik/dynamic_conf:/etc/traefik/dynamic_conf:ro
    networks:
      - proxy
    secrets: # Подключаем секреты сертификатов
      - source: cvibe.ru.crt # Имя секрета, созданного на Шаге 1
        target: cvibe.ru.crt # Имя файла внутри /run/secrets/
      - source: cvibe.ru.key
        target: cvibe.ru.key
      - source: cvibe.ru.ca
        target: cvibe.ru.ca
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [ node.role == manager ]
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "3"

  # Portainer - Docker Management UI (Пример настройки доступа через Traefik)
  portainer:
    image: portainer/portainer-ce:latest
    command: -H unix:///var/run/docker.sock
    ports: # Убираем прямой мапинг порта, если доступ будет только через Traefik
      - target: 9443
        published: 9443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - portainer_data:/data
    networks:
      - proxy
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [ node.role == manager ]
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        # --- HTTP Роутер (для редиректа) ---
        # Замените portainer.cvibe.ru на желаемый поддомен или используйте основной с PathPrefix
        - "traefik.http.routers.portainer-http.entrypoints=web"
        - "traefik.http.routers.portainer-http.rule=Host(`portainer.cvibe.ru`)"
        # --- HTTPS Роутер ---
        - "traefik.http.routers.portainer-secure.entrypoints=websecure"
        - "traefik.http.routers.portainer-secure.rule=Host(`portainer.cvibe.ru`)"
        - "traefik.http.routers.portainer-secure.tls=true" # Включить TLS
        - "traefik.http.services.portainer.loadbalancer.server.port=9000" # Portainer слушает порт 9000 по HTTP

  # Front-end App
  front:
    image: qwikman/resume-front:main
    environment:
      - NODE_ENV=production
      - PORT=80
      - BASE_HOST=https://cvibe.ru # Обновляем на HTTPS URL
    networks:
      - proxy
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        # --- HTTP Роутер (для редиректа) ---
        - "traefik.http.routers.front-http.entrypoints=web"
        - "traefik.http.routers.front-http.rule=Host(`cvibe.ru`) && PathPrefix(`/`)" # Используем ваш домен
        # --- HTTPS Роутер ---
        - "traefik.http.routers.front-secure.entrypoints=websecure"
        - "traefik.http.routers.front-secure.rule=Host(`cvibe.ru`) && PathPrefix(`/`)" # Используем ваш домен
        - "traefik.http.routers.front-secure.tls=true" # Включаем TLS
        - "traefik.http.services.front.loadbalancer.server.port=80"
        - "traefik.http.routers.front-secure.priority=1"

  # User Service
  user-service:
    image: qwikman/user-service:main
    environment:
      - DB_HOST=tarantool:3301
      - APP_ENV=prod
      # URL для внутреннего общения можно оставить HTTP
      # - SOME_INTERNAL_URL=http://ai-service:8080/path
    networks:
      - proxy
      - internal
    depends_on:
      - tarantool
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        # --- HTTP Роутер (для редиректа) ---
        - "traefik.http.routers.user-service-http.entrypoints=web"
        - "traefik.http.routers.user-service-http.rule=Host(`cvibe.ru`) && PathPrefix(`/user_service`)" # Используем ваш домен
        - "traefik.http.routers.user-service-http.middlewares=strip-user-service@docker" # Указываем провайдер для middleware
        # --- HTTPS Роутер ---
        - "traefik.http.routers.user-service-secure.entrypoints=websecure"
        - "traefik.http.routers.user-service-secure.rule=Host(`cvibe.ru`) && PathPrefix(`/user_service`)" # Используем ваш домен
        - "traefik.http.middlewares.strip-user-service.stripprefix.prefixes=/user_service"
        - "traefik.http.routers.user-service-secure.middlewares=strip-user-service@docker" # Указываем провайдер
        - "traefik.http.routers.user-service-secure.tls=true" # Включаем TLS
        - "traefik.http.services.user-service.loadbalancer.server.port=8080"

  # AI Service
  ai-service:
    image: qwikman/ai-service:main
    environment:
      - AUTH_SERVICE_URL=http://user-service:8080/api/v001/auth/check # Внутренний URL - можно оставить HTTP
      # - AUTH_SERVICE_URL=https://cvibe.ru/user_service/api/v001/auth/check # Если нужно через внешний адрес
    networks:
      - proxy
      - internal
    depends_on:
      - user-service
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        # --- HTTP Роутер (для редиректа) ---
        - "traefik.http.routers.ai-service-http.entrypoints=web"
        - "traefik.http.routers.ai-service-http.rule=Host(`cvibe.ru`) && PathPrefix(`/ai_service`)" # Используем ваш домен
        - "traefik.http.routers.ai-service-http.middlewares=strip-ai-service@docker" # Указываем провайдер
        # --- HTTPS Роутер ---
        - "traefik.http.routers.ai-service-secure.entrypoints=websecure"
        - "traefik.http.routers.ai-service-secure.rule=Host(`cvibe.ru`) && PathPrefix(`/ai_service`)" # Используем ваш домен
        - "traefik.http.middlewares.strip-ai-service.stripprefix.prefixes=/ai_service"
        - "traefik.http.routers.ai-service-secure.middlewares=strip-ai-service@docker" # Указываем провайдер
        - "traefik.http.routers.ai-service-secure.tls=true" # Включаем TLS
        - "traefik.http.services.ai-service.loadbalancer.server.port=8080"

  # Minio Resume Service
  minio-resume-service:
    image: minio/minio:latest
    command: server --console-address ":9001" /data/
    ports:
      - "9000:9000" # Для доступа к API
      - "9001:9001" # Для доступа к консоли
    environment:
      - MINIO_ROOT_USER_FILE=/run/secrets/minio_user
      - MINIO_ROOT_PASSWORD_FILE=/run/secrets/minio_password
    secrets:
      - minio_user
      - minio_password
    volumes:
      - minio-storage:/data # Volume для данных
    networks:
      - internal
      # - proxy # Обычно Minio не выставляют напрямую наружу, доступ через сервисы
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure

  postgres-resume-service:
    image: postgres:latest
    # Убираем configs:
    # configs:
    #   - source: postgres_init_sql
    #     target: /docker-entrypoint-initdb.d/init.sql
    volumes:
      # Монтируем init.sql с хоста. Путь на хосте нужно будет создать/обновить через CD pipeline.
      # ВАЖНО: Сработает только при ПУСТОМ каталоге /var/lib/postgresql/data
      - /opt/resume-app/configs/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - postgres-data:/var/lib/postgresql/data # Volume для данных остается
    environment:
      - POSTGRES_USER_FILE=/run/secrets/postgres_user
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_DB=resume_db
    secrets:
      - postgres_user
      - postgres_password
    networks:
      - internal
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      # Можно ограничить размещение нодой, где лежат конфиги
      # placement:
      #   constraints: [node.role == manager]

  # Resume Storage Service
  resume-storage:
    image: qwikman/resume-storage:main
    environment:
      # ... (остальные env vars без изменений) ...
      - MINIO_USE_SSL=false # Внутренняя связь с Minio остается HTTP
    secrets:
      - postgres_user
      - postgres_password
      - minio_user
      - minio_password
    networks:
      - proxy
      - internal
    depends_on:
      - postgres-resume-service
      - minio-resume-service
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
      labels:
        - "traefik.enable=true"
        - "traefik.docker.network=resumeapp_proxy"
        # --- HTTP Роутер (для редиректа) ---
        - "traefik.http.routers.resume-storage-http.entrypoints=web"
        - "traefik.http.routers.resume-storage-http.rule=Host(`cvibe.ru`) && PathPrefix(`/resume_storage`)" # Используем ваш домен
        - "traefik.http.routers.resume-storage-http.middlewares=strip-resume-service@docker" # Указываем провайдер
        # --- HTTPS Роутер ---
        - "traefik.http.routers.resume-storage-secure.entrypoints=websecure"
        - "traefik.http.routers.resume-storage-secure.rule=Host(`cvibe.ru`) && PathPrefix(`/resume_storage`)" # Используем ваш домен
        - "traefik.http.middlewares.strip-resume-service.stripprefix.prefixes=/resume_storage"
        - "traefik.http.routers.resume-storage-secure.middlewares=strip-resume-service@docker" # Указываем провайдер
        - "traefik.http.routers.resume-storage-secure.tls=true" # Включаем TLS
        - "traefik.http.services.resume-storage.loadbalancer.server.port=8080"

networks:
  proxy:
    driver: overlay
    attachable: true
    name: resumeapp_proxy
  internal:
    driver: overlay
    name: resumeapp_internal

volumes:
  minio-storage:
  postgres-data:
  tarantool-data:
  portainer_data:

secrets:
  # Секреты для сертификатов cvibe.ru
  cvibe.ru.crt:
    external: true
  cvibe.ru.key:
    external: true
  # Опционально: секрет для CA
  cvibe.ru.ca:
    external: true

  # Существующие секреты
  minio_user:
    external: true
  minio_password:
    external: true
  postgres_user:
    external: true
  postgres_password:
    external: true

# --- END OF FILE docker-stack.yml ---